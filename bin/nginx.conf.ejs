daemon off;
# stay attached to the dyno process, run in Procfile / web

pid /app/nginx.pid;
# /app is $HOME & working directory of Heroku dyno

error_log stderr info;
# As documented for Nginx, but we still see error during start-up in log:
# >  nginx: [alert] could not open error log file: open() "./logs/error.log"

worker_processes <%%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # Heroku router sends Via header

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log /dev/stdout l2met;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  client_body_timeout <%%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  server {
    listen <%%= ENV["PORT"] %>;
    server_name _;
    keepalive_timeout 5;
    client_max_body_size <%%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    ## HTTPS Only
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }

    resolver 10.1.0.2 8.8.8.8;

    ## Document root
    root <%= config.root %>;

    <% /* Apply common headers globally */ %>
    <% if (config.headers && config.headers.common) {
      Object.keys(config.headers.common).forEach(function(header) { %>
    more_set_headers "<%- header %>: <%- config.headers.common[header] %>" always;
    <% }); } %>

    <% /* Generate location blocks for each merged route */ %>
    <% config.mergedRoutes.forEach(function(item) { %>
    location ~ <%= item.pattern %> {
      <% if (item.target && item.target.trim() !== "") { %>
      try_files $uri <%= item.target %> @404;
      <% } else { %>
      try_files $uri @404;
      <% } %>
      <% Object.keys(item.headers).forEach(function(header) { %>
      more_set_headers "<%- header %>: <%- item.headers[header] %>" always;
      <% }); %>
    }
    <% }); %>

    <% /* Generate header-only location blocks */ %>
    <% config.headerOnlyLocations.forEach(function(item) { %>
    location ~ <%= item.pattern %> {
      try_files $uri @404;
      <% Object.keys(item.headers).forEach(function(header) { %>
      more_set_headers "<%- header %>: <%- item.headers[header] %>" always;
      <% }); %>
    }
    <% }); %>

    <% /* Generate proxy location blocks */ %>
    <% Object.keys(config.proxies).forEach(function(proxyPath) {
          let origin = config.proxies[proxyPath].origin;
    %>
    location <%= proxyPath %> {
      proxy_pass <%- origin %>;
      proxy_ssl_server_name on;
      proxy_redirect <%- origin %>/ <%= proxyPath %>;
      <% Object.keys(config.headers).forEach(function(headerKey) {
              if (headerKey.indexOf(proxyPath) === 0) {
                Object.keys(config.headers[headerKey]).forEach(function(header) { %>
      more_set_headers "<%- header %>: <%- config.headers[headerKey][header] %>" always;
      <%               });
              }
      }); %>
    }
    <% }); %>

    <% /* Generate redirect location blocks */ %>
    <% if (config.redirects) {
         Object.keys(config.redirects).forEach(function(redirectPattern) {
           let redirectConfig = config.redirects[redirectPattern];
           let code = redirectConfig.code || 302;
           let target = redirectConfig.target;
    %>
    location ~ <%= redirectPattern %> {
      return <%= code %> <%= target %>;
    }
    <%     });
       }
    %>

    location @404 {
      return 404;
    }
  }
}