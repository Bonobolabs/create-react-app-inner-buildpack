daemon off;
# stay attached to the dyno process, run in Procfile / web

pid /app/nginx.pid;
# /app is $HOME & working directory of Heroku dyno

error_log stderr info;
# As documented for Nginx, but we still see error during start-up in log:
# >  nginx: [alert] could not open error log file: open() "./logs/error.log"

worker_processes <%%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # Heroku router sends Via header

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log /dev/stdout l2met;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  client_body_timeout <%%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  server {
    listen <%%= ENV["PORT"] %>;
    server_name _;
    keepalive_timeout 5;
    client_max_body_size <%%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    ## HTTPS Only
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }

    ## Document root
    root <%= config.root %>;

    <% /* Generate route locations */ %>
    <% Object.keys(config.routes).forEach(function(route) {
         var target = config.routes[route]; %>
    <% if (route.indexOf('*') !== -1) { %>
    location ~ <%= '^' + route.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*') + '$' %> {
      try_files $uri <%= target %>;
    }
    <% } else { %>
    location <%= route %> {
      try_files $uri <%= target %>;
    }
    <% } %>
    <% }); %>

    <% /* Generate header locations */ %>
    <% Object.keys(config.headers).forEach(function(loc) { %>
    location <%= loc %> {
      <% Object.keys(config.headers[loc]).forEach(function(header) { %>
        add_header <%- header %> "<%- config.headers[loc][header] %>" always;
      <% }); %>
    }
    <% }); %>

    <% /* Generate proxy locations */ %>
    <% let proxyIndex = 0; %>
    <% Object.keys(config.proxies).forEach(function(proxyPath) {
         let origin = config.proxies[proxyPath].origin; %>
    set $upstream_endpoint_<%= proxyIndex %> <%- origin %>;
    location @proxy_<%= proxyIndex %> {
      rewrite ^<%= proxyPath.replace(/\//g, '\\/') %>\\/?(.*)$ /$1 break;
      proxy_pass $upstream_endpoint_<%= proxyIndex %>;
      proxy_ssl_server_name on;
    }
    <% proxyIndex++; }); %>

    location @404 {
      return 404;
    }
  }
}