daemon off;
# stay attached to the dyno process, run in Procfile / web

pid /app/nginx.pid;
# /app is $HOME & working directory of Heroku dyno

error_log stderr info;
# As documented for Nginx, but we still see error during start-up in log:
# >  nginx: [alert] could not open error log file: open() "./logs/error.log"

worker_processes <%%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # Heroku router sends Via header

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log /dev/stdout l2met;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  client_body_timeout <%%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  server {
    listen <%%= ENV["PORT"] %>;
    server_name _;
    keepalive_timeout 5;
    client_max_body_size <%%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    ## HTTPS Only
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }

    ## Document root
    root <%= config.root %>;

    <% /* Apply common headers at the top level */ %>
    <% if (config.headers && config.headers.common) { %>
      <% Object.keys(config.headers.common).forEach(function(header) { %>
        more_set_headers <%- header %> "<%- config.headers.common[header] %>" always;
      <% }); %>
    <% } %>

    <% /* Generate route locations */ %>
    <% Object.keys(config.routes).forEach(function(route) {
      var target = config.routes[route];
      // Ensure target starts with a slash.
      if (target.charAt(0) !== '/') {
        target = '/' + target;
      }
      // Create a regex pattern from the route.
      var pattern;
      if (route === "/") {
        pattern = "^/$";
      } else {
        pattern = "^" + route.replace(/\*\*/g, ".*").replace(/\*/g, "[^/]*") + "$";
      }
    %>
    location ~ <%= pattern %> {
      try_files $uri <%= target %>;
      <% if (config.headers["/**"]) { %>
        <% Object.keys(config.headers["/**"]).forEach(function(header) { %>
          more_set_headers <%- header %> "<%- config.headers["/**"][header] %>" always;
        <% }); %>
      <% } %>
    }

    <% }); %>
    <%
      // Build an array of proxy keys.
      let proxyKeys = Object.keys(config.proxies);
    %>

    <% /* Generate header locations for routes with specific headers, excluding "common" */ %>
      <% Object.keys(config.headers).forEach(function(loc) {
      if (loc === "common") return;  // Skip common headers (applied globally)
      // Check if this header location is already handled by a proxy.
      let skip = proxyKeys.some(proxyKey => loc.indexOf(proxyKey) === 0);
      if (skip) return;
      let pattern;
      if (loc.indexOf('*') !== -1) {
        pattern = "^" + loc.replace(/\*\*/g, ".*").replace(/\*/g, "[^/]*") + "$";
    %>
    location ~ <%= pattern %> {
      <% Object.keys(config.headers[loc]).forEach(function(header) { %>
        more_set_headers <%- header %> "<%- config.headers[loc][header] %>" always;
      <% }); %>
    }
    <%   } else { %>
    location <%= loc %> {
      <% Object.keys(config.headers[loc]).forEach(function(header) { %>
        more_set_headers <%- header %> "<%- config.headers[loc][header] %>" always;
      <% }); %>
    }
    <%   }
    }); %>

    <% /* Generate proxy locations with header overrides */ %>
    <% let proxyIndex = 0; %>
    <% Object.keys(config.proxies).forEach(function(proxyPath) {
        let origin = config.proxies[proxyPath].origin;
    %>
    set $upstream_endpoint_<%= proxyIndex %> <%- origin %>;
    location @proxy_<%= proxyIndex %> {
      rewrite ^<%= proxyPath.replace(/\//g, '\\/') %>\\/?(.*)$ /$1 break;
      proxy_pass $upstream_endpoint_<%= proxyIndex %>;
      proxy_ssl_server_name on;
      <%
        // Iterate over header rules and check if the header location key applies to this proxy.
        Object.keys(config.headers).forEach(function(headerKey) {
          // If the headerKey (like "/__/auth/**") starts with the proxyPath ("/__/auth"), apply its headers.
          if (headerKey.indexOf(proxyPath) === 0) {
            Object.keys(config.headers[headerKey]).forEach(function(header) {
      %>
      more_set_headers <%- header %> "<%- config.headers[headerKey][header] %>" always;
      <%
            });
          }
        });
      %>
    }
    <% proxyIndex++; }); %>

    location @404 {
      return 404;
    }
  }
}